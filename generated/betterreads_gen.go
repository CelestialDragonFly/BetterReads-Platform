//go:build go1.22

// Package betterreads provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package betterreads

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BookSource.
const (
	BookSourceOpenLibrary BookSource = "OpenLibrary"
)

// Defines values for CreatePostRequestBookRating.
const (
	CreatePostRequestBookRatingRatingFiveStar  CreatePostRequestBookRating = "rating_five_star"
	CreatePostRequestBookRatingRatingFourStar  CreatePostRequestBookRating = "rating_four_star"
	CreatePostRequestBookRatingRatingOneStar   CreatePostRequestBookRating = "rating_one_star"
	CreatePostRequestBookRatingRatingThreeStar CreatePostRequestBookRating = "rating_three_star"
	CreatePostRequestBookRatingRatingTwoStar   CreatePostRequestBookRating = "rating_two_star"
	CreatePostRequestBookRatingRatingUnknown   CreatePostRequestBookRating = "rating_unknown"
)

// Defines values for LibraryBookRating.
const (
	LibraryBookRatingRatingFiveStar  LibraryBookRating = "rating_five_star"
	LibraryBookRatingRatingFourStar  LibraryBookRating = "rating_four_star"
	LibraryBookRatingRatingOneStar   LibraryBookRating = "rating_one_star"
	LibraryBookRatingRatingThreeStar LibraryBookRating = "rating_three_star"
	LibraryBookRatingRatingTwoStar   LibraryBookRating = "rating_two_star"
	LibraryBookRatingRatingUnknown   LibraryBookRating = "rating_unknown"
)

// Defines values for LibraryBookShelf.
const (
	LibraryBookShelfShelfRead       LibraryBookShelf = "shelf_read"
	LibraryBookShelfShelfReading    LibraryBookShelf = "shelf_reading"
	LibraryBookShelfShelfWantToRead LibraryBookShelf = "shelf_want_to_read"
)

// Defines values for LibraryBookSource.
const (
	LibraryBookSourceOpenLibrary LibraryBookSource = "OpenLibrary"
)

// Defines values for PostBookRating.
const (
	PostBookRatingRatingFiveStar  PostBookRating = "rating_five_star"
	PostBookRatingRatingFourStar  PostBookRating = "rating_four_star"
	PostBookRatingRatingOneStar   PostBookRating = "rating_one_star"
	PostBookRatingRatingThreeStar PostBookRating = "rating_three_star"
	PostBookRatingRatingTwoStar   PostBookRating = "rating_two_star"
	PostBookRatingRatingUnknown   PostBookRating = "rating_unknown"
)

// Defines values for UpdateLibraryRequestShelf.
const (
	UpdateLibraryRequestShelfShelfRead       UpdateLibraryRequestShelf = "shelf_read"
	UpdateLibraryRequestShelfShelfReading    UpdateLibraryRequestShelf = "shelf_reading"
	UpdateLibraryRequestShelfShelfWantToRead UpdateLibraryRequestShelf = "shelf_want_to_read"
)

// Defines values for UpdateLibraryRequestSource.
const (
	UpdateLibraryRequestSourceOpenLibrary UpdateLibraryRequestSource = "OpenLibrary"
)

// Defines values for UpdateLibraryResponseShelf.
const (
	Finished   UpdateLibraryResponseShelf = "Finished"
	Reading    UpdateLibraryResponseShelf = "Reading"
	WantToRead UpdateLibraryResponseShelf = "WantToRead"
)

// Defines values for UpdateLibraryResponseSource.
const (
	UpdateLibraryResponseSourceOpenLibrary UpdateLibraryResponseSource = "OpenLibrary"
)

// Defines values for UpdatePostRequestBookRating.
const (
	UpdatePostRequestBookRatingRatingFiveStar  UpdatePostRequestBookRating = "rating_five_star"
	UpdatePostRequestBookRatingRatingFourStar  UpdatePostRequestBookRating = "rating_four_star"
	UpdatePostRequestBookRatingRatingOneStar   UpdatePostRequestBookRating = "rating_one_star"
	UpdatePostRequestBookRatingRatingThreeStar UpdatePostRequestBookRating = "rating_three_star"
	UpdatePostRequestBookRatingRatingTwoStar   UpdatePostRequestBookRating = "rating_two_star"
	UpdatePostRequestBookRatingRatingUnknown   UpdatePostRequestBookRating = "rating_unknown"
)

// Defines values for GetUserLibraryParamsFilter.
const (
	ShelfRead       GetUserLibraryParamsFilter = "shelf_read"
	ShelfReading    GetUserLibraryParamsFilter = "shelf_reading"
	ShelfWantToRead GetUserLibraryParamsFilter = "shelf_want_to_read"
)

// Defines values for GetUserLibraryParamsSort.
const (
	AuthorAsc     GetUserLibraryParamsSort = "author_asc"
	AuthorDesc    GetUserLibraryParamsSort = "author_desc"
	DateAddedAsc  GetUserLibraryParamsSort = "date_added_asc"
	DateAddedDesc GetUserLibraryParamsSort = "date_added_desc"
	TitleAsc      GetUserLibraryParamsSort = "title_asc"
	TitleDesc     GetUserLibraryParamsSort = "title_desc"
)

// Book defines model for Book.
type Book struct {
	AuthorId   string `json:"author_id"`
	AuthorName string `json:"author_name"`
	BookImage  string `json:"book_image"`

	// Id Unique identifier for the book
	Id            string     `json:"id"`
	Isbn          string     `json:"isbn"`
	PublishedYear int        `json:"published_year"`
	RatingAverage float32    `json:"rating_average"`
	RatingCount   int        `json:"rating_count"`
	Source        BookSource `json:"source"`
	Title         string     `json:"title"`
}

// BookSource defines model for Book.Source.
type BookSource string

// Comment defines model for Comment.
type Comment struct {
	// Content The textual content of the comment
	Content string `json:"content"`

	// CreatedAt Timestamp when the comment was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the comment
	Id *openapi_types.UUID `json:"id,omitempty"`

	// PostId The ID of the post this comment belongs to
	PostId *openapi_types.UUID `json:"post_id,omitempty"`

	// UserId The ID of the user who created the comment
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// CommentsResponse defines model for CommentsResponse.
type CommentsResponse struct {
	Comments *[]Comment `json:"comments,omitempty"`
	Limit    *int       `json:"limit,omitempty"`
	Page     *int       `json:"page,omitempty"`
	Total    *int       `json:"total,omitempty"`
}

// CreateCommentRequest defines model for CreateCommentRequest.
type CreateCommentRequest struct {
	// Content The textual content of the comment
	Content string `json:"content"`
}

// CreatePostRequest defines model for CreatePostRequest.
type CreatePostRequest struct {
	// Book Details about the book in this log entry
	Book *struct {
		Author   *string                      `json:"author,omitempty"`
		Id       *string                      `json:"id,omitempty"`
		ImageUrl *string                      `json:"image_url,omitempty"`
		Rating   *CreatePostRequestBookRating `json:"rating,omitempty"`
		Status   *interface{}                 `json:"status,omitempty"`
		Title    *string                      `json:"title,omitempty"`
	} `json:"book,omitempty"`
	Description string  `json:"description"`
	Summary     *string `json:"summary,omitempty"`
}

// CreatePostRequestBookRating defines model for CreatePostRequest.Book.Rating.
type CreatePostRequestBookRating string

// CreateProfileRequest defines model for CreateProfileRequest.
type CreateProfileRequest struct {
	Email        string `json:"email"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	ProfilePhoto string `json:"profile_photo"`
	Username     string `json:"username"`
}

// CreateProfileResponse defines model for CreateProfileResponse.
type CreateProfileResponse struct {
	CreatedAt    string `json:"created_at"`
	Email        string `json:"email"`
	FirstName    string `json:"first_name"`
	Id           string `json:"id"`
	LastName     string `json:"last_name"`
	ProfilePhoto string `json:"profile_photo"`
	Username     string `json:"username"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code string `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// GetBooksResponse defines model for GetBooksResponse.
type GetBooksResponse struct {
	Books []Book `json:"books"`
}

// GetFeedResponse defines model for GetFeedResponse.
type GetFeedResponse struct {
	Posts []Post `json:"posts"`
}

// GetLibraryResponse defines model for GetLibraryResponse.
type GetLibraryResponse struct {
	Library []LibraryBook `json:"library"`
}

// GetProfileResponse defines model for GetProfileResponse.
type GetProfileResponse struct {
	CreatedAt    string `json:"created_at"`
	Email        string `json:"email"`
	FirstName    string `json:"first_name"`
	Id           string `json:"id"`
	LastName     string `json:"last_name"`
	ProfilePhoto string `json:"profile_photo"`
	Username     string `json:"username"`
}

// GetUserResponse defines model for GetUserResponse.
type GetUserResponse struct {
	FirstName    string `json:"first_name"`
	Id           string `json:"id"`
	LastName     string `json:"last_name"`
	ProfilePhoto string `json:"profile_photo"`
	Username     string `json:"username"`
}

// LibraryBook defines model for LibraryBook.
type LibraryBook struct {
	AuthorName string `json:"author_name"`

	// BookId Unique identifier for the book
	BookId    string             `json:"book_id"`
	BookImage string             `json:"book_image"`
	Rating    *LibraryBookRating `json:"rating,omitempty"`
	Shelf     LibraryBookShelf   `json:"shelf"`
	Source    LibraryBookSource  `json:"source"`
	Title     string             `json:"title"`
}

// LibraryBookRating defines model for LibraryBook.Rating.
type LibraryBookRating string

// LibraryBookShelf defines model for LibraryBook.Shelf.
type LibraryBookShelf string

// LibraryBookSource defines model for LibraryBook.Source.
type LibraryBookSource string

// Post defines model for Post.
type Post struct {
	// Book Details about the book in this log entry
	Book *struct {
		Author   *string         `json:"author,omitempty"`
		Id       *string         `json:"id,omitempty"`
		ImageUrl *string         `json:"image_url,omitempty"`
		Rating   *PostBookRating `json:"rating,omitempty"`
		Status   *interface{}    `json:"status,omitempty"`
		Title    *string         `json:"title,omitempty"`
	} `json:"book,omitempty"`

	// CreatedAt Timestamp when the comment was created
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description string     `json:"description"`
	Id          string     `json:"id"`
	LikeCount   *int       `json:"like_count,omitempty"`
	Summary     string     `json:"summary"`
	UserId      string     `json:"user_id"`
}

// PostBookRating defines model for Post.Book.Rating.
type PostBookRating string

// UpdateLibraryRequest defines model for UpdateLibraryRequest.
type UpdateLibraryRequest struct {
	AuthorName string `json:"author_name"`

	// BookId Unique identifier for the book
	BookId    string                     `json:"book_id"`
	BookImage string                     `json:"book_image"`
	Shelf     UpdateLibraryRequestShelf  `json:"shelf"`
	Source    UpdateLibraryRequestSource `json:"source"`
	Title     string                     `json:"title"`
}

// UpdateLibraryRequestShelf defines model for UpdateLibraryRequest.Shelf.
type UpdateLibraryRequestShelf string

// UpdateLibraryRequestSource defines model for UpdateLibraryRequest.Source.
type UpdateLibraryRequestSource string

// UpdateLibraryResponse defines model for UpdateLibraryResponse.
type UpdateLibraryResponse struct {
	AuthorName string `json:"author_name"`

	// BookId Unique identifier for the book
	BookId    string                      `json:"book_id"`
	BookImage string                      `json:"book_image"`
	Shelf     UpdateLibraryResponseShelf  `json:"shelf"`
	Source    UpdateLibraryResponseSource `json:"source"`
	Title     string                      `json:"title"`
}

// UpdateLibraryResponseShelf defines model for UpdateLibraryResponse.Shelf.
type UpdateLibraryResponseShelf string

// UpdateLibraryResponseSource defines model for UpdateLibraryResponse.Source.
type UpdateLibraryResponseSource string

// UpdatePostRequest defines model for UpdatePostRequest.
type UpdatePostRequest struct {
	// Book Updated book details (optional)
	Book *struct {
		Author   *string                      `json:"author,omitempty"`
		Id       *string                      `json:"id,omitempty"`
		ImageUrl *string                      `json:"image_url,omitempty"`
		Rating   *UpdatePostRequestBookRating `json:"rating,omitempty"`
		Status   *interface{}                 `json:"status,omitempty"`
		Title    *string                      `json:"title,omitempty"`
	} `json:"book,omitempty"`
	Description *string `json:"description,omitempty"`
	Summary     *string `json:"summary,omitempty"`
}

// UpdatePostRequestBookRating defines model for UpdatePostRequest.Book.Rating.
type UpdatePostRequestBookRating string

// UpdateProfileRequest defines model for UpdateProfileRequest.
type UpdateProfileRequest struct {
	Email        *string `json:"email,omitempty"`
	FirstName    *string `json:"first_name,omitempty"`
	LastName     *string `json:"last_name,omitempty"`
	ProfilePhoto *string `json:"profile_photo,omitempty"`
	Username     *string `json:"username,omitempty"`
}

// UpdateProfileResponse defines model for UpdateProfileResponse.
type UpdateProfileResponse struct {
	CreatedAt    string `json:"created_at"`
	Email        string `json:"email"`
	FirstName    string `json:"first_name"`
	Id           string `json:"id"`
	LastName     string `json:"last_name"`
	ProfilePhoto string `json:"profile_photo"`
	Username     string `json:"username"`
}

// SearchBooksParams defines parameters for SearchBooks.
type SearchBooksParams struct {
	// Query General search query (searches across title, author, and description)
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Title Search by book title (case-insensitive, partial matches supported)
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Author Search by author name (case-insensitive, partial matches supported)
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Subject Search by subject or genre
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// Page Page number for pagination (starts at 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPersonalizedFeedParams defines parameters for GetPersonalizedFeed.
type GetPersonalizedFeedParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of posts per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Since Only return posts created after this timestamp
	Since *time.Time `form:"since,omitempty" json:"since,omitempty"`
}

// GetUserFeedParams defines parameters for GetUserFeed.
type GetUserFeedParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of posts per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// RemoveLibraryBookParams defines parameters for RemoveLibraryBook.
type RemoveLibraryBookParams struct {
	// BookId Unique identifier of the book to remove from library
	BookId string `form:"book_id" json:"book_id"`
}

// GetUserLibraryParams defines parameters for GetUserLibrary.
type GetUserLibraryParams struct {
	// Filter Filter books by reading shelf
	Filter *GetUserLibraryParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of books per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort Sort order for library books
	Sort *GetUserLibraryParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserLibraryParamsFilter defines parameters for GetUserLibrary.
type GetUserLibraryParamsFilter string

// GetUserLibraryParamsSort defines parameters for GetUserLibrary.
type GetUserLibraryParamsSort string

// GetCommentsForPostParams defines parameters for GetCommentsForPost.
type GetCommentsForPostParams struct {
	// Page Page number for pagination (default is 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of comments to return per page (default is 20).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddCommentParams defines parameters for AddComment.
type AddCommentParams struct {
	// Page Page number for pagination (default is 1).
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of comments to return per page (default is 20).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateLibraryBookJSONRequestBody defines body for UpdateLibraryBook for application/json ContentType.
type UpdateLibraryBookJSONRequestBody = UpdateLibraryRequest

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePostRequest

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = UpdatePostRequest

// AddCommentJSONRequestBody defines body for AddComment for application/json ContentType.
type AddCommentJSONRequestBody = CreateCommentRequest

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UpdateProfileRequest

// CreateUserProfileJSONRequestBody defines body for CreateUserProfile for application/json ContentType.
type CreateUserProfileJSONRequestBody = CreateProfileRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search for books
	// (GET /api/v1/books)
	SearchBooks(w http.ResponseWriter, r *http.Request, params SearchBooksParams)
	// Get personalized feed
	// (GET /api/v1/feed)
	GetPersonalizedFeed(w http.ResponseWriter, r *http.Request, params GetPersonalizedFeedParams)
	// Get user's public posts
	// (GET /api/v1/feed/{user_id})
	GetUserFeed(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, params GetUserFeedParams)
	// Remove book from library
	// (DELETE /api/v1/library)
	RemoveLibraryBook(w http.ResponseWriter, r *http.Request, params RemoveLibraryBookParams)
	// Add or update book in library
	// (PUT /api/v1/library)
	UpdateLibraryBook(w http.ResponseWriter, r *http.Request)
	// Get user's library
	// (GET /api/v1/library/{user_id})
	GetUserLibrary(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, params GetUserLibraryParams)
	// Create a new post
	// (POST /api/v1/posts)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete a post
	// (DELETE /api/v1/posts/{post_id})
	DeletePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Update a post
	// (PUT /api/v1/posts/{post_id})
	UpdatePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Retrieve comments for a post
	// (GET /api/v1/posts/{post_id}/comments)
	GetCommentsForPost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params GetCommentsForPostParams)
	// Add a comment to a post
	// (POST /api/v1/posts/{post_id}/comments)
	AddComment(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params AddCommentParams)
	// Delete a specific comment from a post
	// (DELETE /api/v1/posts/{post_id}/comments/{comment_id})
	DeleteComment(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, commentId openapi_types.UUID)
	// Like a post
	// (POST /api/v1/posts/{post_id}/like)
	LikePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Unlike a post
	// (DELETE /api/v1/posts/{post_id}/unlike)
	UnlikePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Delete user profile
	// (DELETE /api/v1/profile)
	DeleteUserProfile(w http.ResponseWriter, r *http.Request)
	// Get current user profile
	// (GET /api/v1/profile)
	GetCurrentUserProfile(w http.ResponseWriter, r *http.Request)
	// Update user profile
	// (PATCH /api/v1/profile)
	UpdateUserProfile(w http.ResponseWriter, r *http.Request)
	// Create user profile
	// (POST /api/v1/profile)
	CreateUserProfile(w http.ResponseWriter, r *http.Request)
	// Get user information
	// (GET /api/v1/users/{user_id})
	GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Follow a user
	// (POST /api/v1/users/{user_id}/follow)
	FollowUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Unfollow a user
	// (DELETE /api/v1/users/{user_id}/unfollow)
	UnfollowUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SearchBooks operation middleware
func (siw *ServerInterfaceWrapper) SearchBooks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchBooksParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", r.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "title", Err: err})
		return
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", r.URL.Query(), &params.Author)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPersonalizedFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPersonalizedFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPersonalizedFeedParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", r.URL.Query(), &params.Since)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "since", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPersonalizedFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserFeed operation middleware
func (siw *ServerInterfaceWrapper) GetUserFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserFeedParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserFeed(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveLibraryBook operation middleware
func (siw *ServerInterfaceWrapper) RemoveLibraryBook(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveLibraryBookParams

	// ------------- Required query parameter "book_id" -------------

	if paramValue := r.URL.Query().Get("book_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "book_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "book_id", r.URL.Query(), &params.BookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "book_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveLibraryBook(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLibraryBook operation middleware
func (siw *ServerInterfaceWrapper) UpdateLibraryBook(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLibraryBook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserLibrary operation middleware
func (siw *ServerInterfaceWrapper) GetUserLibrary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserLibraryParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserLibrary(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCommentsForPost operation middleware
func (siw *ServerInterfaceWrapper) GetCommentsForPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommentsForPostParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommentsForPost(w, r, postId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddComment operation middleware
func (siw *ServerInterfaceWrapper) AddComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AddCommentParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddComment(w, r, postId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	// ------------- Path parameter "comment_id" -------------
	var commentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "comment_id", r.PathValue("comment_id"), &commentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComment(w, r, postId, commentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LikePost operation middleware
func (siw *ServerInterfaceWrapper) LikePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LikePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnlikePost operation middleware
func (siw *ServerInterfaceWrapper) UnlikePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", r.PathValue("post_id"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnlikePost(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserProfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUserProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUserProfile operation middleware
func (siw *ServerInterfaceWrapper) CreateUserProfile(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FollowUser operation middleware
func (siw *ServerInterfaceWrapper) FollowUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnfollowUser operation middleware
func (siw *ServerInterfaceWrapper) UnfollowUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", r.PathValue("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnfollowUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/v1/books", wrapper.SearchBooks)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/feed", wrapper.GetPersonalizedFeed)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/feed/{user_id}", wrapper.GetUserFeed)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/library", wrapper.RemoveLibraryBook)
	m.HandleFunc("PUT "+options.BaseURL+"/api/v1/library", wrapper.UpdateLibraryBook)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/library/{user_id}", wrapper.GetUserLibrary)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/posts", wrapper.CreatePost)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/posts/{post_id}", wrapper.DeletePost)
	m.HandleFunc("PUT "+options.BaseURL+"/api/v1/posts/{post_id}", wrapper.UpdatePost)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/posts/{post_id}/comments", wrapper.GetCommentsForPost)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/posts/{post_id}/comments", wrapper.AddComment)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/posts/{post_id}/comments/{comment_id}", wrapper.DeleteComment)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/posts/{post_id}/like", wrapper.LikePost)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/posts/{post_id}/unlike", wrapper.UnlikePost)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/profile", wrapper.DeleteUserProfile)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/profile", wrapper.GetCurrentUserProfile)
	m.HandleFunc("PATCH "+options.BaseURL+"/api/v1/profile", wrapper.UpdateUserProfile)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/profile", wrapper.CreateUserProfile)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/users/{user_id}", wrapper.GetUserById)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/users/{user_id}/follow", wrapper.FollowUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/users/{user_id}/unfollow", wrapper.UnfollowUser)

	return m
}

type SearchBooksRequestObject struct {
	Params SearchBooksParams
}

type SearchBooksResponseObject interface {
	VisitSearchBooksResponse(w http.ResponseWriter) error
}

type SearchBooks200ResponseHeaders struct {
	XPage       int
	XPerPage    int
	XTotalCount int
}

type SearchBooks200JSONResponse struct {
	Body    GetBooksResponse
	Headers SearchBooks200ResponseHeaders
}

func (response SearchBooks200JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-Page", fmt.Sprint(response.Headers.XPage))
	w.Header().Set("X-Per-Page", fmt.Sprint(response.Headers.XPerPage))
	w.Header().Set("X-Total-Count", fmt.Sprint(response.Headers.XTotalCount))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchBooks400JSONResponse ErrorResponse

func (response SearchBooks400JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchBooks429JSONResponse ErrorResponse

func (response SearchBooks429JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type SearchBooks500JSONResponse ErrorResponse

func (response SearchBooks500JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonalizedFeedRequestObject struct {
	Params GetPersonalizedFeedParams
}

type GetPersonalizedFeedResponseObject interface {
	VisitGetPersonalizedFeedResponse(w http.ResponseWriter) error
}

type GetPersonalizedFeed200JSONResponse GetFeedResponse

func (response GetPersonalizedFeed200JSONResponse) VisitGetPersonalizedFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonalizedFeed401JSONResponse ErrorResponse

func (response GetPersonalizedFeed401JSONResponse) VisitGetPersonalizedFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonalizedFeed500JSONResponse ErrorResponse

func (response GetPersonalizedFeed500JSONResponse) VisitGetPersonalizedFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserFeedRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Params GetUserFeedParams
}

type GetUserFeedResponseObject interface {
	VisitGetUserFeedResponse(w http.ResponseWriter) error
}

type GetUserFeed200JSONResponse GetFeedResponse

func (response GetUserFeed200JSONResponse) VisitGetUserFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserFeed400JSONResponse ErrorResponse

func (response GetUserFeed400JSONResponse) VisitGetUserFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUserFeed404JSONResponse ErrorResponse

func (response GetUserFeed404JSONResponse) VisitGetUserFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserFeed500JSONResponse ErrorResponse

func (response GetUserFeed500JSONResponse) VisitGetUserFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveLibraryBookRequestObject struct {
	Params RemoveLibraryBookParams
}

type RemoveLibraryBookResponseObject interface {
	VisitRemoveLibraryBookResponse(w http.ResponseWriter) error
}

type RemoveLibraryBook204Response struct {
}

func (response RemoveLibraryBook204Response) VisitRemoveLibraryBookResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveLibraryBook400JSONResponse ErrorResponse

func (response RemoveLibraryBook400JSONResponse) VisitRemoveLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveLibraryBook401JSONResponse ErrorResponse

func (response RemoveLibraryBook401JSONResponse) VisitRemoveLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveLibraryBook404JSONResponse ErrorResponse

func (response RemoveLibraryBook404JSONResponse) VisitRemoveLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveLibraryBook500JSONResponse ErrorResponse

func (response RemoveLibraryBook500JSONResponse) VisitRemoveLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLibraryBookRequestObject struct {
	Body *UpdateLibraryBookJSONRequestBody
}

type UpdateLibraryBookResponseObject interface {
	VisitUpdateLibraryBookResponse(w http.ResponseWriter) error
}

type UpdateLibraryBook200JSONResponse UpdateLibraryResponse

func (response UpdateLibraryBook200JSONResponse) VisitUpdateLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLibraryBook400JSONResponse ErrorResponse

func (response UpdateLibraryBook400JSONResponse) VisitUpdateLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLibraryBook401JSONResponse ErrorResponse

func (response UpdateLibraryBook401JSONResponse) VisitUpdateLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLibraryBook500JSONResponse ErrorResponse

func (response UpdateLibraryBook500JSONResponse) VisitUpdateLibraryBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserLibraryRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Params GetUserLibraryParams
}

type GetUserLibraryResponseObject interface {
	VisitGetUserLibraryResponse(w http.ResponseWriter) error
}

type GetUserLibrary200JSONResponse GetLibraryResponse

func (response GetUserLibrary200JSONResponse) VisitGetUserLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserLibrary400JSONResponse ErrorResponse

func (response GetUserLibrary400JSONResponse) VisitGetUserLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUserLibrary403JSONResponse ErrorResponse

func (response GetUserLibrary403JSONResponse) VisitGetUserLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserLibrary404JSONResponse ErrorResponse

func (response GetUserLibrary404JSONResponse) VisitGetUserLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserLibrary500JSONResponse ErrorResponse

func (response GetUserLibrary500JSONResponse) VisitGetUserLibraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePostRequestObject struct {
	Body *CreatePostJSONRequestBody
}

type CreatePostResponseObject interface {
	VisitCreatePostResponse(w http.ResponseWriter) error
}

type CreatePost201JSONResponse Post

func (response CreatePost201JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePost400JSONResponse ErrorResponse

func (response CreatePost400JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePost401JSONResponse ErrorResponse

func (response CreatePost401JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePost500JSONResponse ErrorResponse

func (response CreatePost500JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
}

type DeletePostResponseObject interface {
	VisitDeletePostResponse(w http.ResponseWriter) error
}

type DeletePost204Response struct {
}

func (response DeletePost204Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePost404JSONResponse ErrorResponse

func (response DeletePost404JSONResponse) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePost500JSONResponse ErrorResponse

func (response DeletePost500JSONResponse) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePostRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
	Body   *UpdatePostJSONRequestBody
}

type UpdatePostResponseObject interface {
	VisitUpdatePostResponse(w http.ResponseWriter) error
}

type UpdatePost200JSONResponse Post

func (response UpdatePost200JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePost400JSONResponse ErrorResponse

func (response UpdatePost400JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePost404JSONResponse ErrorResponse

func (response UpdatePost404JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePost500JSONResponse ErrorResponse

func (response UpdatePost500JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsForPostRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
	Params GetCommentsForPostParams
}

type GetCommentsForPostResponseObject interface {
	VisitGetCommentsForPostResponse(w http.ResponseWriter) error
}

type GetCommentsForPost200JSONResponse CommentsResponse

func (response GetCommentsForPost200JSONResponse) VisitGetCommentsForPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsForPost404JSONResponse ErrorResponse

func (response GetCommentsForPost404JSONResponse) VisitGetCommentsForPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCommentsForPost500JSONResponse ErrorResponse

func (response GetCommentsForPost500JSONResponse) VisitGetCommentsForPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCommentRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
	Params AddCommentParams
	Body   *AddCommentJSONRequestBody
}

type AddCommentResponseObject interface {
	VisitAddCommentResponse(w http.ResponseWriter) error
}

type AddComment201JSONResponse Comment

func (response AddComment201JSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddComment400JSONResponse ErrorResponse

func (response AddComment400JSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddComment404JSONResponse ErrorResponse

func (response AddComment404JSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddComment500JSONResponse ErrorResponse

func (response AddComment500JSONResponse) VisitAddCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCommentRequestObject struct {
	PostId    openapi_types.UUID `json:"post_id"`
	CommentId openapi_types.UUID `json:"comment_id"`
}

type DeleteCommentResponseObject interface {
	VisitDeleteCommentResponse(w http.ResponseWriter) error
}

type DeleteComment204Response struct {
}

func (response DeleteComment204Response) VisitDeleteCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteComment400JSONResponse ErrorResponse

func (response DeleteComment400JSONResponse) VisitDeleteCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteComment401JSONResponse ErrorResponse

func (response DeleteComment401JSONResponse) VisitDeleteCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteComment404JSONResponse ErrorResponse

func (response DeleteComment404JSONResponse) VisitDeleteCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteComment500JSONResponse ErrorResponse

func (response DeleteComment500JSONResponse) VisitDeleteCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LikePostRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
}

type LikePostResponseObject interface {
	VisitLikePostResponse(w http.ResponseWriter) error
}

type LikePost204Response struct {
}

func (response LikePost204Response) VisitLikePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type LikePost400JSONResponse ErrorResponse

func (response LikePost400JSONResponse) VisitLikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LikePost401JSONResponse ErrorResponse

func (response LikePost401JSONResponse) VisitLikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LikePost404JSONResponse ErrorResponse

func (response LikePost404JSONResponse) VisitLikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type LikePost500JSONResponse ErrorResponse

func (response LikePost500JSONResponse) VisitLikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UnlikePostRequestObject struct {
	PostId openapi_types.UUID `json:"post_id"`
}

type UnlikePostResponseObject interface {
	VisitUnlikePostResponse(w http.ResponseWriter) error
}

type UnlikePost204Response struct {
}

func (response UnlikePost204Response) VisitUnlikePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnlikePost400JSONResponse ErrorResponse

func (response UnlikePost400JSONResponse) VisitUnlikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UnlikePost401JSONResponse ErrorResponse

func (response UnlikePost401JSONResponse) VisitUnlikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UnlikePost404JSONResponse ErrorResponse

func (response UnlikePost404JSONResponse) VisitUnlikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UnlikePost500JSONResponse ErrorResponse

func (response UnlikePost500JSONResponse) VisitUnlikePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserProfileRequestObject struct {
}

type DeleteUserProfileResponseObject interface {
	VisitDeleteUserProfileResponse(w http.ResponseWriter) error
}

type DeleteUserProfile204Response struct {
}

func (response DeleteUserProfile204Response) VisitDeleteUserProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserProfile401JSONResponse ErrorResponse

func (response DeleteUserProfile401JSONResponse) VisitDeleteUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserProfile500JSONResponse ErrorResponse

func (response DeleteUserProfile500JSONResponse) VisitDeleteUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserProfileRequestObject struct {
}

type GetCurrentUserProfileResponseObject interface {
	VisitGetCurrentUserProfileResponse(w http.ResponseWriter) error
}

type GetCurrentUserProfile200JSONResponse GetProfileResponse

func (response GetCurrentUserProfile200JSONResponse) VisitGetCurrentUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserProfile401JSONResponse ErrorResponse

func (response GetCurrentUserProfile401JSONResponse) VisitGetCurrentUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserProfile500JSONResponse ErrorResponse

func (response GetCurrentUserProfile500JSONResponse) VisitGetCurrentUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserProfileRequestObject struct {
	Body *UpdateUserProfileJSONRequestBody
}

type UpdateUserProfileResponseObject interface {
	VisitUpdateUserProfileResponse(w http.ResponseWriter) error
}

type UpdateUserProfile200JSONResponse UpdateProfileResponse

func (response UpdateUserProfile200JSONResponse) VisitUpdateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserProfile400JSONResponse ErrorResponse

func (response UpdateUserProfile400JSONResponse) VisitUpdateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserProfile401JSONResponse ErrorResponse

func (response UpdateUserProfile401JSONResponse) VisitUpdateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserProfile409JSONResponse ErrorResponse

func (response UpdateUserProfile409JSONResponse) VisitUpdateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserProfile500JSONResponse ErrorResponse

func (response UpdateUserProfile500JSONResponse) VisitUpdateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserProfileRequestObject struct {
	Body *CreateUserProfileJSONRequestBody
}

type CreateUserProfileResponseObject interface {
	VisitCreateUserProfileResponse(w http.ResponseWriter) error
}

type CreateUserProfile201JSONResponse CreateProfileResponse

func (response CreateUserProfile201JSONResponse) VisitCreateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserProfile400JSONResponse ErrorResponse

func (response CreateUserProfile400JSONResponse) VisitCreateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserProfile409JSONResponse ErrorResponse

func (response CreateUserProfile409JSONResponse) VisitCreateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserProfile500JSONResponse ErrorResponse

func (response CreateUserProfile500JSONResponse) VisitCreateUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse GetUserResponse

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById400JSONResponse ErrorResponse

func (response GetUserById400JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse ErrorResponse

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById500JSONResponse ErrorResponse

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FollowUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type FollowUserResponseObject interface {
	VisitFollowUserResponse(w http.ResponseWriter) error
}

type FollowUser204Response struct {
}

func (response FollowUser204Response) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type FollowUser400JSONResponse ErrorResponse

func (response FollowUser400JSONResponse) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FollowUser401JSONResponse ErrorResponse

func (response FollowUser401JSONResponse) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FollowUser404JSONResponse ErrorResponse

func (response FollowUser404JSONResponse) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FollowUser409JSONResponse ErrorResponse

func (response FollowUser409JSONResponse) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type FollowUser500JSONResponse ErrorResponse

func (response FollowUser500JSONResponse) VisitFollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type UnfollowUserResponseObject interface {
	VisitUnfollowUserResponse(w http.ResponseWriter) error
}

type UnfollowUser204Response struct {
}

func (response UnfollowUser204Response) VisitUnfollowUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnfollowUser400JSONResponse ErrorResponse

func (response UnfollowUser400JSONResponse) VisitUnfollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUser401JSONResponse ErrorResponse

func (response UnfollowUser401JSONResponse) VisitUnfollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUser404JSONResponse ErrorResponse

func (response UnfollowUser404JSONResponse) VisitUnfollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UnfollowUser500JSONResponse ErrorResponse

func (response UnfollowUser500JSONResponse) VisitUnfollowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Search for books
	// (GET /api/v1/books)
	SearchBooks(ctx context.Context, request SearchBooksRequestObject) (SearchBooksResponseObject, error)
	// Get personalized feed
	// (GET /api/v1/feed)
	GetPersonalizedFeed(ctx context.Context, request GetPersonalizedFeedRequestObject) (GetPersonalizedFeedResponseObject, error)
	// Get user's public posts
	// (GET /api/v1/feed/{user_id})
	GetUserFeed(ctx context.Context, request GetUserFeedRequestObject) (GetUserFeedResponseObject, error)
	// Remove book from library
	// (DELETE /api/v1/library)
	RemoveLibraryBook(ctx context.Context, request RemoveLibraryBookRequestObject) (RemoveLibraryBookResponseObject, error)
	// Add or update book in library
	// (PUT /api/v1/library)
	UpdateLibraryBook(ctx context.Context, request UpdateLibraryBookRequestObject) (UpdateLibraryBookResponseObject, error)
	// Get user's library
	// (GET /api/v1/library/{user_id})
	GetUserLibrary(ctx context.Context, request GetUserLibraryRequestObject) (GetUserLibraryResponseObject, error)
	// Create a new post
	// (POST /api/v1/posts)
	CreatePost(ctx context.Context, request CreatePostRequestObject) (CreatePostResponseObject, error)
	// Delete a post
	// (DELETE /api/v1/posts/{post_id})
	DeletePost(ctx context.Context, request DeletePostRequestObject) (DeletePostResponseObject, error)
	// Update a post
	// (PUT /api/v1/posts/{post_id})
	UpdatePost(ctx context.Context, request UpdatePostRequestObject) (UpdatePostResponseObject, error)
	// Retrieve comments for a post
	// (GET /api/v1/posts/{post_id}/comments)
	GetCommentsForPost(ctx context.Context, request GetCommentsForPostRequestObject) (GetCommentsForPostResponseObject, error)
	// Add a comment to a post
	// (POST /api/v1/posts/{post_id}/comments)
	AddComment(ctx context.Context, request AddCommentRequestObject) (AddCommentResponseObject, error)
	// Delete a specific comment from a post
	// (DELETE /api/v1/posts/{post_id}/comments/{comment_id})
	DeleteComment(ctx context.Context, request DeleteCommentRequestObject) (DeleteCommentResponseObject, error)
	// Like a post
	// (POST /api/v1/posts/{post_id}/like)
	LikePost(ctx context.Context, request LikePostRequestObject) (LikePostResponseObject, error)
	// Unlike a post
	// (DELETE /api/v1/posts/{post_id}/unlike)
	UnlikePost(ctx context.Context, request UnlikePostRequestObject) (UnlikePostResponseObject, error)
	// Delete user profile
	// (DELETE /api/v1/profile)
	DeleteUserProfile(ctx context.Context, request DeleteUserProfileRequestObject) (DeleteUserProfileResponseObject, error)
	// Get current user profile
	// (GET /api/v1/profile)
	GetCurrentUserProfile(ctx context.Context, request GetCurrentUserProfileRequestObject) (GetCurrentUserProfileResponseObject, error)
	// Update user profile
	// (PATCH /api/v1/profile)
	UpdateUserProfile(ctx context.Context, request UpdateUserProfileRequestObject) (UpdateUserProfileResponseObject, error)
	// Create user profile
	// (POST /api/v1/profile)
	CreateUserProfile(ctx context.Context, request CreateUserProfileRequestObject) (CreateUserProfileResponseObject, error)
	// Get user information
	// (GET /api/v1/users/{user_id})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// Follow a user
	// (POST /api/v1/users/{user_id}/follow)
	FollowUser(ctx context.Context, request FollowUserRequestObject) (FollowUserResponseObject, error)
	// Unfollow a user
	// (DELETE /api/v1/users/{user_id}/unfollow)
	UnfollowUser(ctx context.Context, request UnfollowUserRequestObject) (UnfollowUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// SearchBooks operation middleware
func (sh *strictHandler) SearchBooks(w http.ResponseWriter, r *http.Request, params SearchBooksParams) {
	var request SearchBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchBooks(ctx, request.(SearchBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchBooksResponseObject); ok {
		if err := validResponse.VisitSearchBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPersonalizedFeed operation middleware
func (sh *strictHandler) GetPersonalizedFeed(w http.ResponseWriter, r *http.Request, params GetPersonalizedFeedParams) {
	var request GetPersonalizedFeedRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersonalizedFeed(ctx, request.(GetPersonalizedFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersonalizedFeed")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPersonalizedFeedResponseObject); ok {
		if err := validResponse.VisitGetPersonalizedFeedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserFeed operation middleware
func (sh *strictHandler) GetUserFeed(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, params GetUserFeedParams) {
	var request GetUserFeedRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserFeed(ctx, request.(GetUserFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserFeed")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserFeedResponseObject); ok {
		if err := validResponse.VisitGetUserFeedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveLibraryBook operation middleware
func (sh *strictHandler) RemoveLibraryBook(w http.ResponseWriter, r *http.Request, params RemoveLibraryBookParams) {
	var request RemoveLibraryBookRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveLibraryBook(ctx, request.(RemoveLibraryBookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveLibraryBook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemoveLibraryBookResponseObject); ok {
		if err := validResponse.VisitRemoveLibraryBookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLibraryBook operation middleware
func (sh *strictHandler) UpdateLibraryBook(w http.ResponseWriter, r *http.Request) {
	var request UpdateLibraryBookRequestObject

	var body UpdateLibraryBookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLibraryBook(ctx, request.(UpdateLibraryBookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLibraryBook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLibraryBookResponseObject); ok {
		if err := validResponse.VisitUpdateLibraryBookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserLibrary operation middleware
func (sh *strictHandler) GetUserLibrary(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, params GetUserLibraryParams) {
	var request GetUserLibraryRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserLibrary(ctx, request.(GetUserLibraryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserLibrary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserLibraryResponseObject); ok {
		if err := validResponse.VisitGetUserLibraryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePost operation middleware
func (sh *strictHandler) CreatePost(w http.ResponseWriter, r *http.Request) {
	var request CreatePostRequestObject

	var body CreatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePost(ctx, request.(CreatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePostResponseObject); ok {
		if err := validResponse.VisitCreatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePost operation middleware
func (sh *strictHandler) DeletePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	var request DeletePostRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePost(ctx, request.(DeletePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostResponseObject); ok {
		if err := validResponse.VisitDeletePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePost operation middleware
func (sh *strictHandler) UpdatePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	var request UpdatePostRequestObject

	request.PostId = postId

	var body UpdatePostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePost(ctx, request.(UpdatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePostResponseObject); ok {
		if err := validResponse.VisitUpdatePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCommentsForPost operation middleware
func (sh *strictHandler) GetCommentsForPost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params GetCommentsForPostParams) {
	var request GetCommentsForPostRequestObject

	request.PostId = postId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCommentsForPost(ctx, request.(GetCommentsForPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCommentsForPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCommentsForPostResponseObject); ok {
		if err := validResponse.VisitGetCommentsForPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddComment operation middleware
func (sh *strictHandler) AddComment(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params AddCommentParams) {
	var request AddCommentRequestObject

	request.PostId = postId
	request.Params = params

	var body AddCommentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddComment(ctx, request.(AddCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddCommentResponseObject); ok {
		if err := validResponse.VisitAddCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteComment operation middleware
func (sh *strictHandler) DeleteComment(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, commentId openapi_types.UUID) {
	var request DeleteCommentRequestObject

	request.PostId = postId
	request.CommentId = commentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteComment(ctx, request.(DeleteCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteComment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCommentResponseObject); ok {
		if err := validResponse.VisitDeleteCommentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LikePost operation middleware
func (sh *strictHandler) LikePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	var request LikePostRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LikePost(ctx, request.(LikePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LikePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LikePostResponseObject); ok {
		if err := validResponse.VisitLikePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnlikePost operation middleware
func (sh *strictHandler) UnlikePost(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	var request UnlikePostRequestObject

	request.PostId = postId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnlikePost(ctx, request.(UnlikePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnlikePost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnlikePostResponseObject); ok {
		if err := validResponse.VisitUnlikePostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserProfile operation middleware
func (sh *strictHandler) DeleteUserProfile(w http.ResponseWriter, r *http.Request) {
	var request DeleteUserProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserProfile(ctx, request.(DeleteUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserProfileResponseObject); ok {
		if err := validResponse.VisitDeleteUserProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUserProfile operation middleware
func (sh *strictHandler) GetCurrentUserProfile(w http.ResponseWriter, r *http.Request) {
	var request GetCurrentUserProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUserProfile(ctx, request.(GetCurrentUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUserProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCurrentUserProfileResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserProfile operation middleware
func (sh *strictHandler) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateUserProfileRequestObject

	var body UpdateUserProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserProfile(ctx, request.(UpdateUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserProfileResponseObject); ok {
		if err := validResponse.VisitUpdateUserProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUserProfile operation middleware
func (sh *strictHandler) CreateUserProfile(w http.ResponseWriter, r *http.Request) {
	var request CreateUserProfileRequestObject

	var body CreateUserProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUserProfile(ctx, request.(CreateUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUserProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserProfileResponseObject); ok {
		if err := validResponse.VisitCreateUserProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FollowUser operation middleware
func (sh *strictHandler) FollowUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request FollowUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FollowUser(ctx, request.(FollowUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FollowUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FollowUserResponseObject); ok {
		if err := validResponse.VisitFollowUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnfollowUser operation middleware
func (sh *strictHandler) UnfollowUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request UnfollowUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnfollowUser(ctx, request.(UnfollowUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnfollowUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnfollowUserResponseObject); ok {
		if err := validResponse.VisitUnfollowUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
