// Package openlibrary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openlibrary

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// SearchDocument defines model for SearchDocument.
type SearchDocument struct {
	AuthorKey            []string               `json:"author_key"`
	AuthorName           []string               `json:"author_name"`
	CoverEditionKey      string                 `json:"cover_edition_key"`
	Isbn                 []string               `json:"isbn"`
	Key                  string                 `json:"key"`
	PublishYear          []int                  `json:"publish_year"`
	RatingsAverage       float32                `json:"ratings_average"`
	RatingsCount         int                    `json:"ratings_count"`
	Title                string                 `json:"title"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Docs             []SearchDocument `json:"docs"`
	DocumentationUrl string           `json:"documentation_url"`
	NumFound         int              `json:"numFound"`
	NumFoundExact    bool             `json:"numFoundExact"`
	Offset           *int             `json:"offset"`
	Q                string           `json:"q"`
	Start            int              `json:"start"`
}

// SearchBooksParams defines parameters for SearchBooks.
type SearchBooksParams struct {
	// Q General search query (title, author, etc.)
	Q string `form:"q" json:"q"`

	// Title Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Author Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Subject Subject of the book
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// Page Page number of results to return
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of results to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Fields Comma-separated list of fields to include in the response.
	// Use `*` to fetch all fields.
	// Include `availability` to fetch item availability from archive.org (e.g. `fields=*,availability`).
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// Lang Two-letter ISO 639-1 language code indicating the user's language preference.
	// This influences the edition shown (e.g., prefer French edition if `fr` is passed)
	// but does **not** exclude works that donâ€™t match the language.
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`

	// UserAgent Contact info
	UserAgent string `json:"User-Agent"`
}

// Getter for additional properties for SearchDocument. Returns the specified
// element and whether it was found
func (a SearchDocument) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SearchDocument
func (a *SearchDocument) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SearchDocument to handle AdditionalProperties
func (a *SearchDocument) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author_key"]; found {
		err = json.Unmarshal(raw, &a.AuthorKey)
		if err != nil {
			return fmt.Errorf("error reading 'author_key': %w", err)
		}
		delete(object, "author_key")
	}

	if raw, found := object["author_name"]; found {
		err = json.Unmarshal(raw, &a.AuthorName)
		if err != nil {
			return fmt.Errorf("error reading 'author_name': %w", err)
		}
		delete(object, "author_name")
	}

	if raw, found := object["cover_edition_key"]; found {
		err = json.Unmarshal(raw, &a.CoverEditionKey)
		if err != nil {
			return fmt.Errorf("error reading 'cover_edition_key': %w", err)
		}
		delete(object, "cover_edition_key")
	}

	if raw, found := object["isbn"]; found {
		err = json.Unmarshal(raw, &a.Isbn)
		if err != nil {
			return fmt.Errorf("error reading 'isbn': %w", err)
		}
		delete(object, "isbn")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["publish_year"]; found {
		err = json.Unmarshal(raw, &a.PublishYear)
		if err != nil {
			return fmt.Errorf("error reading 'publish_year': %w", err)
		}
		delete(object, "publish_year")
	}

	if raw, found := object["ratings_average"]; found {
		err = json.Unmarshal(raw, &a.RatingsAverage)
		if err != nil {
			return fmt.Errorf("error reading 'ratings_average': %w", err)
		}
		delete(object, "ratings_average")
	}

	if raw, found := object["ratings_count"]; found {
		err = json.Unmarshal(raw, &a.RatingsCount)
		if err != nil {
			return fmt.Errorf("error reading 'ratings_count': %w", err)
		}
		delete(object, "ratings_count")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SearchDocument to handle AdditionalProperties
func (a SearchDocument) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["author_key"], err = json.Marshal(a.AuthorKey)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'author_key': %w", err)
	}

	object["author_name"], err = json.Marshal(a.AuthorName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'author_name': %w", err)
	}

	object["cover_edition_key"], err = json.Marshal(a.CoverEditionKey)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cover_edition_key': %w", err)
	}

	object["isbn"], err = json.Marshal(a.Isbn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'isbn': %w", err)
	}

	object["key"], err = json.Marshal(a.Key)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'key': %w", err)
	}

	object["publish_year"], err = json.Marshal(a.PublishYear)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'publish_year': %w", err)
	}

	object["ratings_average"], err = json.Marshal(a.RatingsAverage)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratings_average': %w", err)
	}

	object["ratings_count"], err = json.Marshal(a.RatingsCount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratings_count': %w", err)
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'title': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SearchBooks request
	SearchBooks(ctx context.Context, params *SearchBooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SearchBooks(ctx context.Context, params *SearchBooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchBooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSearchBooksRequest generates requests for SearchBooks
func NewSearchBooksRequest(server string, params *SearchBooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lang != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, params.UserAgent)
		if err != nil {
			return nil, err
		}

		req.Header.Set("User-Agent", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SearchBooksWithResponse request
	SearchBooksWithResponse(ctx context.Context, params *SearchBooksParams, reqEditors ...RequestEditorFn) (*SearchBooksResponse, error)
}

type SearchBooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResponse
}

// Status returns HTTPResponse.Status
func (r SearchBooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchBooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SearchBooksWithResponse request returning *SearchBooksResponse
func (c *ClientWithResponses) SearchBooksWithResponse(ctx context.Context, params *SearchBooksParams, reqEditors ...RequestEditorFn) (*SearchBooksResponse, error) {
	rsp, err := c.SearchBooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchBooksResponse(rsp)
}

// ParseSearchBooksResponse parses an HTTP response from a SearchBooksWithResponse call
func ParseSearchBooksResponse(rsp *http.Response) (*SearchBooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchBooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
